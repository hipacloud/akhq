name: akhq

on:
  push:
    branches:
      - dev

jobs:
  build-docker-image:
    runs-on: ubuntu-18.04
    steps:
    - name: Git Checkout
      uses: actions/checkout@v2
          # Caches
    - name: Gradle cache
      uses: actions/cache@v1
      with:
        path: ~/.gradle/caches
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
    - name: Gradle wrapper cache
      uses: actions/cache@v1
      with:
        path: ~/.gradle/wrapper
        key: ${{ runner.os }}-wrapper-${{ hashFiles('**/*.gradle') }}
        restore-keys: |
          ${{ runner.os }}-wrapper-
    - name: Npm cache
      uses: actions/cache@v1
      with:
        path: ~/.npm
        key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-
    - name: Node cache
      uses: actions/cache@v1
      with:
        path: node
        key: ${{ runner.os }}-node-${{ hashFiles('**/*.gradle') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - uses: actions/setup-java@v2
      with:
        distribution: 'adopt'
        java-version: '11'
    # Shadow Jar
    - name: Build jars and distribution archives
      run: ./gradlew shadowJar --no-daemon && ls -alh ./build/libs
    - name: Copy jar to docker
      run: cp build/libs/*-all.jar docker/app/akhq.jar
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: cn-northwest-1
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Set Docker image tag
      run: |
        echo "DOCKER_IMAGE_NAME=${{ steps.login-ecr.outputs.registry }}/devops:akhq-`date +'%Y%m%d'`-${GITHUB_RUN_NUMBER}" >> $GITHUB_ENV
    - name: Docker build and push
      run: |
        docker build -f Dockerfile -t $DOCKER_IMAGE_NAME .
        docker push $DOCKER_IMAGE_NAME
    - name: Wechatwork robot notify
      if: success()
      uses: blunt1973/wechatwork-action@master
      with:
        url: ${{ secrets.WECHATWORK_DEVOPS_WEBHOOK}}
        type: markdown
        content: |
          ${DOCKER_IMAGE_NAME}
          build success!
    - name: Logout of Amazon ECR
      if: always()
      run: docker logout ${{ steps.login-ecr.outputs.registry }}